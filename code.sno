mod onebitreg {
    input{
        bit data;
        bit set;
    }
    output{
        bit value;
    }
    @ xor mem;
    = mem mem;
    @ or reset;
    @ and switch_on;
    @ and flip_if_on;
    = set reset;
    = reset flip_if_on;
    = mem flip_if_on;
    = flip_if_on mem;
    = set switch_on;
    = data switch_on;
    = switch_on mem;
    = mem value;
}

wire byte {
    [8]bit data;
}

mod eightbitreg {
    input{
        byte data;
        bit set;
    }
    output{
        byte value;
    }
    @ [8]onebitreg registers;
    loop $n in (1,8) {
        = data[$n] registers[$n].data;
        = set registers.set[$n];
        = registers[$n].value value[$n];
    } 
}