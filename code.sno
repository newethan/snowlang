mod Reg
{
    # input
    let and[8] data;
    let and set;
    let and read;

    # output
    let and[8] out;

    # memory
    let xor[8] mem;
    con mem mem;

    # reset
    let and[8] reset;
    con mem reset;
    con reset mem;

    # set
    con data mem;
    for i in (0, 7)
    {
        con set data[i];
        con set reset[i];
    }

    # read
    con mem out;
    for i in (0, 7)
    {
        con read out[i];
    }
}

mod Multiplexer
{
    # input
    let or[8] address;

    # output
    let and[256] board;

    # negate address
    let nor[8] neg;
    con address neg;

    for m in (0,255)
    {
        for n in (0, 7)
        {
            if m % 2**(n+1) < 2**(n+1) / 2
            {
                print "cell ";
                print m;
                print " bit ";
                print n;
                print " neg: ";
                print m % 2**(n+1);
                print " < ";
                print 2**(n+1) / 2;
                print ".\n";
                con neg[7 - n] board[m];
            }
            else
            {
                print "cell ";
                print m;
                print " bit ";
                print n;
                print " non-neg: ";
                print m % 2**(n+1);
                print " >= ";
                print 2**(n+1) / 2;
                print ".\n";
                con address[7 - n] board[m];
            }
        }
    }
}

mod Ram
{
    # input
    let or[8] address;
    let or[8] data;
    let or set;
    let or read;
    
    # output
    let or[8] out;

    let Multiplexer mult;
    let Reg[256] regs;
    con address mult.address;

    for n in (0, 255)
    {
        con set regs[n].set;
        con read regs[n].read;
        con mult.board[n] regs[n].set;
        con mult.board[n] regs[n].read;
        con regs[n].out out;
        con data regs[n].data;
    }
}

mod Main
{
    #let Ram ram;
    #let or[8] u_address;
    #let or[8] u_data;
    #let or u_set;
    #let or u_read;

    #con u_address ram.address;
    #con u_data ram.data;
    #con u_set ram.set;
    #con u_read ram.read;

    let Multiplexer m;
}

let runtime()
{
    # hold u_address 00000101 100;
    # hold u_data 11100111 100;
    # tick 10;
    # hold u_set 1 1;
    # tick 10;
    # print <ram.regs[5].mem>;
    # print "\n";

    hold m.address 00000101 100;
    tick 10;
    print <m.address>;
    print "\n";
    print <m.neg>;
    print "\n";
    print <m.board>;
    print "\n";
}