mod Bitreg {
    # input
    let and data;
    let or set;
    let or read;

    # ouput
    let and value;
    
    # memory
    let xor mem;
    con mem mem;

    # reset
    let and reset;
    con mem reset;
    con reset mem; # another gate must be connected to reset.

    # set mem
    con set data;
    con data mem;
    con set reset;

    # red mem
    con read value;
    con mem value;
}

mod Reg {
    # input
    let or[8] data;
    let and set;
    let and read;

    #output
    let or[8] value;

    let Bitreg[8] registers;
    for n in (0, 7)
    {
        con data[n] registers[n].data;
        con set registers[n].set;
        con read registers[n].read;
        con registers[n].value value[n];
    }
}

mod Multiplexer {
    # input
    let or[8] address;

    # output
    let and[256] board;

    let nor[8] neg;
    con address neg;
    for n in (0, 7) {
        for m in (0,255)
        {
            if (m % 2**n < 2**n / 2)
            {
                con address[n] board[m];
            }
            else
            {
                con neg[n] board[m];
            }
        }
    }
}

mod Ram
{
    # input
    let or[8] address;
    let or[8] data;
    let or set;
    let or read;
    
    # output
    let or[8] out;

    let Multiplexer mult;
    let Reg[256] regs;
    con address mult.address;

    for n in (0, 255)
    {
        con set regs[n].set;
        con read regs[n].read;
        con mult.board[n] regs[n].set;
        con mult.board[n] regs[n].read;
        con regs[n].value out;
        con data regs[n].data;
    }
}

mod Main
{
    # let Bitreg br;
    let xor mem;
    con mem mem;
    let or set;
    con set mem;
}

let runtime()
{
    # hold br.data 1 50;
    # tick 10;
    # hold br.set 1 1;
    # tick 10;
    # hold br.read 1 1;
    # for i in (0, 10)
    # {
    #     tick 1;
    #     print <br.mem>;
    #     print "\n";
    # }

    for i in (1, 10)
    {
        tick 1;
        print <mem>;
        print "\n";
    }
    print "\n";
    hold set 1 1;
    for i in (1, 10)
    {
        tick 1;
        print <mem>;
        print "\n";
    }
}