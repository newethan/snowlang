# Main file for the snowlang computer -
# A logical computer written in snowlang

import "mem.sno";
import "multiplexer.sno";
import "alu.sno";

mod Main
{
    # number of bits used in the computer
    # (memory space will be extended to accomodate all addresses possible
    # with the given number of bits)

    # WARNING!!!
    # build time increases exponentially with the number of bits.
    # ADVISED 16 AS MAX NUMBER OF BITS (should take about 20 seconds to build).
    bits = 8;

    # number of bits in the stack pointer (stack has 2**stackp_bits bytes)
    stackp_bits = 8;

    ##############
    # bus
    ##############
    let or bus[bits];

    ##############
    # ram
    ##############
    let Ram(bits) ram;

    ##############
    # registers
    ##############
    let SncomputerRegs(bits, stackp_bits) regs;

    ##############
    # ALU
    ##############
    let ALU(bits) alu;

    ##############
    # processor 
    ##############

    ins_bits = 5; # number of bits in instruction binary
    # main tick signal - give 1 tick pulse to activate computer
    let or cpu_tick;

    # instruction multiplexer
    let Multiplexer(ins_bits) mult;

    # HLT - bin 00000
    # nothing to do
    
    # NOP - bin 00001
    # advance step counter, tick
}

let runtime()
{
    print "Computer constructed.";
}