arithmetic operator precedence:
1. exponentiation
    `**` (POW)
2. unary operators
    `+` (PLUS), `-` (MINUS)
3. multiplication, division, modulo(remainder)
    `*` (MULT), `/` (DIV), `%` (REM)
4. addition, subtraction
    `+` (PLUS), `-` (MINUS)  [both binary]

script
    : (MOD IDEN LBRACE PUBLIC declarations PRIVATE block RBRACE /
        LET LPAREN (IDEN (COMMA IDEN)*)? RPAREN LBRACE function_block RBRACE)*
    ;
declarations
    : (LET type IDEN SEMICOLON)*
    ;
block
    : (instruction)*
    ;
function_block
    : (function_instruction)*
    ;
instruction
    : LET type IDEN SEMICOLON
    : CONNECT item item SEMICOLON
    : IDEN ASSIGN expr SEMICOLON
    : FOR IDEN IN range LBRACE block RBRACE
    : WHILE expr LBRACE block RBRACE
    : BREAK SEMICOLON
    : CONTINUE SEMICOLON
    : IF expr LBRACE block RBRACE
        (ELIF expr LBRACE block RBRACE)*
        (ELSE LBRACE block RBRACE)?
    ;
function_instruction
    : IDEN ASSIGN expr SEMICOLON
    : FOR IDEN IN range LBRACE function_block RBRACE
    : WHILE expr LBRACE block RBRACE
    : BREAK SEMICOLON
    : CONTINUE SEMICOLON
    : IF expr LBRACE function_block RBRACE
        (ELIF expr LBRACE function_block RBRACE)*
        (ELSE LBRACE function_block RBRACE)?
    : RETURN expr SEMICOLON
    ;
item
    : IDEN (LBRACK expr RBRACK)? (PERIOD IDEN (LBRACK expr RBRACK)?)*
    ;
type
    : IDEN
    : IDEN LBRACK INT RBRACK 
    ;
expr
    : equality_expr (AND equality_expr)*
    ;
or_expr
    : equality_expr (OR equality_expr)*
    ;
equality_expr
    : ineqality_expr ((EQ|NEQ) ineqality_expr)*
    ;
ineqality_expr
    : arith_expr ((GT|GE|LE|LT) arith_expr)*
    ;
arith_expr
    : term ((PLUS|MINUS) term)*
    ;
term
    : factor ((MULT|DIV|REM) factor)*
    ;
factor
    : (PLUS|MINUS|NOT) factor
    : atom (POW factor)*
    ;
atom
    : IDEN
    : INT
    : FLOAT
    : LPAREN expr RPAREN
    : IDEN LPAREN (expr (COMMA expr)*)? RPAREN
    ;
range
    : LPAREN expr COMMA expr RPAREN
    ;