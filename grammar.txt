arithmetic operator precedence:
1. exponentiation
    `**` (POW)
2. unary operators
    `+` (PLUS), `-` (MINUS)
3. multiplication, division, modulo(remainder)
    `*` (MULT), `/` (DIV), `%` (REM)
4. addition, subtraction
    `+` (PLUS), `-` (MINUS)  [both binary]
5. logical or
    `|` (OR)
6. logical and
    `&` (AND)

script
    : (MOD LPAREN (IDEN (COMMA IDEN)*)? RPAREN IDEN LBRACE block RBRACE /
        LET LPAREN (IDEN (COMMA IDEN)*)? RPAREN LBRACE block RBRACE)*
    ;
block
    : (instruction)*
    ;
instruction
    : LET IDEN (LPAREN (expr (COMMA expr)*)? RPAREN)? IDEN (LBRACK expr RBRACK)? SEMICOLON
    : CONNECT item item SEMICOLON
    : IDEN ASSIGN expr SEMICOLON
    : FOR IDEN IN LPAREN expr COMMA expr RPAREN LBRACE block RBRACE
    : WHILE expr LBRACE block RBRACE
    : BREAK SEMICOLON
    : CONTINUE SEMICOLON
    : IF expr LBRACE block RBRACE
        (ELIF expr LBRACE block RBRACE)*
        (ELSE LBRACE block RBRACE)?
    : PRINT ((STRLIT (COMMA expr)*) | item) SEMICOLON
    : TICK expr? SEMICOLON
    : HOLD item INT expr SEMICOLON
    ;
item
    : IDEN (LBRACK expr RBRACK)? (PERIOD IDEN (LBRACK expr RBRACK)?)*
    ;
expr
    : equality_expr (AND equality_expr)*
    ;
or_expr
    : equality_expr (OR equality_expr)*
    ;
equality_expr
    : ineqality_expr ((EQ|NEQ) ineqality_expr)*
    ;
ineqality_expr
    : arith_expr ((GT|GE|LE|LT) arith_expr)*
    ;
arith_expr
    : term ((PLUS|MINUS) term)*
    ;
term
    : factor ((MULT|DIV|REM) factor)*
    ;
factor
    : (PLUS|MINUS|NOT) factor
    : atom (POW factor)*
    ;
atom
    : IDEN
    : INT
    : FLOAT
    : LPAREN expr RPAREN
    : IDEN LPAREN (expr (COMMA expr)*)? RPAREN
    ;

Regex of terminals:

skipped terminals:
    WHITESPACE : \s+
    COMMENT : #.*(\n|$)

parenthesis, braces and brackets:
    LBRACE : \{
    RBRACE : \}
    LBRACK : \[
    RBRACK : \]
    LPAREN : \(
    RPAREN : \)

delimiters:
    SEMICOLON : ;
    COMMA : ,

operations:
    PERIOD : \.        (member access)
    PLUS : \+
    MINUS : -
    POW : \*\*
    MULT : \*
    DIV : /
    REM : %
    MOD : mod\b
    ASSIGN : =(?!=)    (variable assignment)
    OR : \|
    AND : &
    NOT : !(?!=)
    GT : >(?!=)
    GE : >=
    EQ : ==
    NEQ : !=
    LE : <=
    LT : <(?!=)

instructions and keywords for instructions:
    PRINT : print\b
    TICK : tick\b
    HOLD : hold\b
    LET : let\b
    CON : con\b
    IF : if\b
    ELIF : elif\b
    ELSE : else\b
    FOR : for\b
    WHILE : while\b
    BREAK : break\b
    CONTINUE : continue\b
    RETURN : return\b
    IN : in\b

terminals with variable values:
    FLOAT : [0-9]+[.][0-9]+
    INT : \d+
    IDEN : \w+\b
    STRLIT : \".*?\"
